apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: '../versioning.gradle'

def getReleaseRepositoryUrl() {
    return 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
}

afterEvaluate { project ->
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = GROUP
                if (isReleaseVersion()) {
                    version = buildVersionName()
                } else {
                    version = buildVersionName() + '-SNAPSHOT'
                }
                artifactId = POM_ARTIFACT_ID
                from components.release
                pom {
                    name = POM_ARTIFACT_ID
                    description = POM_DESCRIPTION
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENSE_NAME
                            url = POM_LICENSE_URL
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }

        repositories {
            maven {

                url = isReleaseVersion() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
                credentials {
                    username = OSSRH_USERNAME
                    password = OSSRH_PASSWORD
                }
            }
        }

    }
    signing {
        project.logger.info('version: ' + project.getVersion())
        def signingKey = GPG_SIGNING_KEY
        def signingPassword = GPG_SIGNING_PASSWORD
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}
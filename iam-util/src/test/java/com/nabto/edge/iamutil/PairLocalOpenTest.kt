package com.nabto.edge.iamutil

import com.nabto.edge.client.Connection
import com.nabto.edge.iamutil.mocks.createCoapMock
import com.nabto.edge.iamutil.mocks.createGetPairingCoapMock
import io.mockk.every
import io.mockk.mockk
import kotlinx.serialization.Serializable
import kotlinx.serialization.cbor.Cbor
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Test
import kotlin.test.assertFailsWith

@kotlinx.serialization.ExperimentalSerializationApi
class PairLocalOpenTest {
    val connection : Connection = mockk<Connection>();
    val iamUtil = IamUtil.create()
    val username = "testuser"

    @Before
    fun setup() {
        every { connection.createCoap("GET", "/iam/pairing" ) } returns ( createGetPairingCoapMock() )
    }

    @Serializable
    class PairingLocalOpenRequestData {
        val Username : String = ""
    }

    fun mockPairingLocalOpenCoapCall(statusCode : Int) {
        val coap = createCoapMock()
        every { coap.setRequestPayload(60, any()) } answers {
            val bytes = secondArg<ByteArray>()
            val request : PairingLocalOpenRequestData = Cbor{ignoreUnknownKeys = true}.decodeFromByteArray<PairingLocalOpenRequestData>(
                PairingLocalOpenRequestData.serializer(), bytes)
            assertEquals(request.Username, username);
        }
        every { coap.responseStatusCode } returns statusCode

        every { connection.createCoap("POST", "/iam/pairing/local-open" ) } returns coap
    }

    @Test
    fun pairLocalOpen() {
        mockPairingLocalOpenCoapCall(201)
        iamUtil.pairLocalOpen(connection, username);
    }

    @Test
    fun pairLocalOpenBadRequest() {
        mockPairingLocalOpenCoapCall(400)
        val exception = assertFailsWith<IamException> {
            iamUtil.pairLocalOpen(connection, username);
        }
        assertEquals(exception.getError(), IamError.INVALID_INPUT)
    }
    @Test
    fun pairLocalOpenBlockedByIam() {
        mockPairingLocalOpenCoapCall(403)
        val exception = assertFailsWith<IamException> {
            iamUtil.pairLocalOpen(connection, username);
        }
        assertEquals(exception.getError(), IamError.BLOCKED_BY_DEVICE_CONFIGURATION)
    }
    @Test
    fun pairLocalOpenModeDisabled() {
        mockPairingLocalOpenCoapCall(404)
        val exception = assertFailsWith<IamException> {
            iamUtil.pairLocalOpen(connection, username);
        }
        assertEquals(exception.getError(), IamError.PAIRING_MODE_DISABLED)
    }
    @Test
    fun pairLocalOpenUsernameExists() {
        mockPairingLocalOpenCoapCall(409)
        val exception = assertFailsWith<IamException> {
            iamUtil.pairLocalOpen(connection, username);
        }
        assertEquals(exception.getError(), IamError.USERNAME_EXISTS)
    }
}
